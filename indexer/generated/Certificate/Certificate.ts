// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CertificationCreated extends ethereum.Event {
  get params(): CertificationCreated__Params {
    return new CertificationCreated__Params(this);
  }
}

export class CertificationCreated__Params {
  _event: CertificationCreated;

  constructor(event: CertificationCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get hash(): string {
    return this._event.parameters[1].value.toString();
  }

  get message(): string {
    return this._event.parameters[2].value.toString();
  }

  get category(): string {
    return this._event.parameters[3].value.toString();
  }

  get author(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get holder(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class CoffeeBought extends ethereum.Event {
  get params(): CoffeeBought__Params {
    return new CoffeeBought__Params(this);
  }
}

export class CoffeeBought__Params {
  _event: CoffeeBought;

  constructor(event: CoffeeBought) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get holder(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get message(): string {
    return this._event.parameters[3].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Certificate__certificationResult {
  value0: BigInt;
  value1: string;
  value2: string;
  value3: string;
  value4: Address;
  value5: Address;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: string,
    value2: string,
    value3: string,
    value4: Address,
    value5: Address,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getHash(): string {
    return this.value1;
  }

  getMessage(): string {
    return this.value2;
  }

  getCategory(): string {
    return this.value3;
  }

  getAuthor(): Address {
    return this.value4;
  }

  getHolder(): Address {
    return this.value5;
  }

  getTimestamp(): BigInt {
    return this.value6;
  }
}

export class Certificate extends ethereum.SmartContract {
  static bind(address: Address): Certificate {
    return new Certificate("Certificate", address);
  }

  certification(param0: BigInt): Certificate__certificationResult {
    let result = super.call(
      "certification",
      "certification(uint256):(uint256,string,string,string,address,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Certificate__certificationResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toString(),
      result[3].toString(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toBigInt()
    );
  }

  try_certification(
    param0: BigInt
  ): ethereum.CallResult<Certificate__certificationResult> {
    let result = super.tryCall(
      "certification",
      "certification(uint256):(uint256,string,string,string,address,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Certificate__certificationResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toString(),
        value[3].toString(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toBigInt()
      )
    );
  }

  certificationCount(): BigInt {
    let result = super.call(
      "certificationCount",
      "certificationCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_certificationCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "certificationCount",
      "certificationCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  coffeePrice(): BigInt {
    let result = super.call("coffeePrice", "coffeePrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_coffeePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("coffeePrice", "coffeePrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  coffeesCount(): BigInt {
    let result = super.call("coffeesCount", "coffeesCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_coffeesCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("coffeesCount", "coffeesCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyCoffeeCall extends ethereum.Call {
  get inputs(): BuyCoffeeCall__Inputs {
    return new BuyCoffeeCall__Inputs(this);
  }

  get outputs(): BuyCoffeeCall__Outputs {
    return new BuyCoffeeCall__Outputs(this);
  }
}

export class BuyCoffeeCall__Inputs {
  _call: BuyCoffeeCall;

  constructor(call: BuyCoffeeCall) {
    this._call = call;
  }

  get _holder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _message(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class BuyCoffeeCall__Outputs {
  _call: BuyCoffeeCall;

  constructor(call: BuyCoffeeCall) {
    this._call = call;
  }
}

export class CreateCertificationCall extends ethereum.Call {
  get inputs(): CreateCertificationCall__Inputs {
    return new CreateCertificationCall__Inputs(this);
  }

  get outputs(): CreateCertificationCall__Outputs {
    return new CreateCertificationCall__Outputs(this);
  }
}

export class CreateCertificationCall__Inputs {
  _call: CreateCertificationCall;

  constructor(call: CreateCertificationCall) {
    this._call = call;
  }

  get _message(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _hash(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _category(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _holder(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CreateCertificationCall__Outputs {
  _call: CreateCertificationCall;

  constructor(call: CreateCertificationCall) {
    this._call = call;
  }
}
